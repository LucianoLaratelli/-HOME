#!/usr/bin/env bash

# Create a new directory and enter it
system=$(uname -s)
#mac specific commands
if [ "$system" = "Darwin" ]; then
	# `o` with no arguments opens the current directory, otherwise opens the given
	# location
	function o() {
		if [ $# -eq 0 ]; then
			open .
		else
			open "$@"
		fi
	}
fi
if [ "$system" = "Linux" ]; then
	function o() {
		if [ $# -eq 0 ]; then
			xdg-open .
		else
			xdg-open "$@"
		fi
	}
fi

function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# function rg() {
# 	# because I use $HOME as a git directory (and therefore have a .gitignore in $HOME),
# 	# rg's default respect of whatever gitignore it finds can get annoying when the current
# 	# directory is not a git directory
# 	# this will find the closest gitignore to the current directory, then
# 	# not take the gitignore into account if that nearest gitignore is the one in $HOME
# 	#
# 	# TODO: fix behavior when text is piped to rg

# 	EXEC="rg"
# 	GITIGNORE=".gitignore"
# 	RGFLAGS="-i"
# 	START="$(pwd)"
# 	if [ "${START}" == "${HOME}" ]; then #bail early if we're home
# 		"${EXEC}" "$@" --no-ignore "${RGFLAGS}"
# 	elif [[ "${START}" != "/home/${USER}"* ]]; then
# 		# if we're above ${HOME}, this will prevent an infinite loop down below.
# 		# TODO: add case for macos, where directory structure is `/Users/${USER}`
# 		"${EXEC}" "$@" "${RGFLAGS}"
# 	else
# 		if [ -f "${GITIGNORE}" ]; then
# 			"${EXEC}" "$@" "${RGFLAGS}"
# 		else
# 			while [ ! -f "${GITIGNORE}" ]; do
# 				cd ..
# 			done
# 			STOP="$(pwd)"
# 			cd "${START}" || echo "rg function failed to find ${START}"
# 			if [ "${STOP}" == "${HOME}" ]; then
# 				"${EXEC}" "$@" --no-ignore "${RGFLAGS}"
# 			else
# 				"${EXEC}" "$@" "${RGFLAGS}"
# 			fi
# 		fi
# 	fi
# }

function update() {
	system=$(uname -s)
	pushd ~ || (
		echo "pushd failed to push ~ onto directory stack"
		exit
	)
	git pull
	if [ "$system" = "Darwin" ]; then
		sudo softwareupdate -i -a
		brew update
		brew upgrade
		brew cleanup
		sudo npm install -g npm
	else
		if cat /etc/*release | rg -U "ID=" | rg "arch"; then
			yay -Syu --devel --timeupdate
			yay -Yc
		else
			sudo apt update
			sudo apt upgrade
			sudo apt autoremove
		fi
		npm install -g npm
	fi
	rustup update
	npm update
	pip_upgrade_outdated -u -p
	doom update
	doom upgrade
	popd || (
		echo "popd failed to pop top of directory stack"
		exit
	)
}
