#!/usr/bin/env bash

# Create a new directory and enter it
system=$(uname -s)
#mac specific commands
if [ "$system" = "Darwin" ]; then
	# `o` with no arguments opens the current directory, otherwise opens the given
	# location
	function o() {
		if [ $# -eq 0 ]; then
			open .
		else
			open "$@"
		fi
	}
fi
if [ "$system" = "Linux" ]; then
	function o() {
		if [ $# -eq 0 ]; then
			xdg-open .
		else
			xdg-open "$@"
		fi
	}
fi

function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function udd() {
	pushd ~/.home || (
		echo "pushd failed to push ~/.home onto directory stack"
		exit
	)
	git pull
	stow bash doom git tmux vim
	popd || (
		echo "popd failed to pop top of directory stack"
		exit
	)
}

function ude() {
	doom -y upgrade
	doom -y sync
	doom -y env
	doom -y compile
}

function ud() {
	udd

	system=$(uname -s)
	if [ "$system" = "Darwin" ]; then
		brew update
		brew upgrade
		brew cleanup
	else
		if cat /etc/*release | rg "arch"; then
			yay -Syu --devel --timeupdate
			yay -Yc
		else
			sudo apt update
			sudo apt upgrade
			sudo apt autoremove
		fi
	fi

	sudo npm install -g npm
	sudo npm update
	rustup update
	pip_upgrade_outdated -u -p

	ude
}

function popall() {
	until ! popd; do
		echo ""
	done
}
