#!/usr/bin/env bash

# Create a new directory and enter it
system=$(uname -s)
if [ "$system" = "Linux" ]; then
	function o() {
		if [ $# -eq 0 ]; then
			xdg-open .
		else
			xdg-open "$@"
		fi
	}
fi

function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function udd() {
	pushd ~/.home || (
		echo "pushd failed to push ~/.home onto directory stack"
		exit
	)
	git pull
	stow --target=${HOME} bash doom git tmux vim
	popd || (
		echo "popd failed to pop top of directory stack"
		exit
	)
}

function ude() {
	doom -y upgrade
	doom -y sync
	doom -y env
	doom -y compile
}

function ud() {
	udd

	if cat /etc/*release | rg "arch"; then
		yay -Syu --devel --timeupdate
		yay -Yc
		pushd ~/.home

		sudo pacman -S --needed - <pkglist.txt #install any new packages from other computers

		pacman -Qqen >tmppkg.txt
		sort tmppkg.txt pkglist.txt | uniq >tmppkg2.txt
		mv tmppkg2.txt pkglist.txt

		pacman -Qqm >tmpaur.txt
		sort tmpaur.txt AUR.txt | uniq >tmpaur2.txt
		mv tmpaur2.txt AUR.txt

		rm tmppkg.txt
		rm tmpaur.txt
		git add pkglist.txt
		git commit -m "automated pkglist update"
		git add AUR.txt
		git commit -m "automated AURlist update"
		git push
		popd
	else
		sudo apt update
		sudo apt upgrade
		sudo apt autoremove
	fi

	if command -v flatpak; then
		flatpak update
	fi

	if command -v snap; then
		sudo snap refresh
	fi

	if command -v npm; then
		sudo npm install -g npm
		sudo npm update
	fi

	if command -v rustup; then
		rustup update
	fi

	if command -v pip; then
		pushd ~/.home
		pip list | tail +3 | awk '{print $1}' >tmppip.txt
		sort tmppip.txt pippkg.txt | uniq >pippkg.txt
		rm tmppip.txt
		git add pippkg.txt
		git commit -m "automated pip pkg update"
		git push
		popd
	fi

	if command -v pip_upgrade_outdated; then
		pip_upgrade_outdated -u -p
	fi

	if command -v rvm; then
		rvm get stable
	fi

	if command -v update_rubygems; then
		update_rubygems
	fi

	if command -v gem; then
		gem update --system
	fi
	pushd ~/repos/emacs/
	git pull
	make -j24 NATIVE_FULL_AOT=1
	sudo make install
	popd

	ude
}

function popall() {
	until ! popd; do
		echo ""
	done
}
